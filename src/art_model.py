import argparse

import torch
from pl_bolts.models.gans import DCGAN as MTGArtModel
from torch.utils.data import DataLoader
from torchvision.datasets import ImageFolder
from torchvision import transforms as T
import torchvision.transforms.functional as TF
from torchvision.utils import make_grid
import pytorch_lightning as pl

import matplotlib.pyplot as plt

from typing import Optional

def single_image(model: torch.nn.Module) -> torch.Tensor:
    """Generate a single image from the model."""
    output = model(torch.rand(1, 100)).squeeze(0) * 0.5 + 0.5
    return output.detach().permute(1, 2, 0)

def demo_single(model: torch.nn.Module) -> None:
    """Create a demo of a single image generated by model."""
    plt.imshow(single_image(model))
    plt.show()

def demo_grid(model: torch.nn.Module) -> None:
    """Create a 3 x 5 demo of images generated by model."""
    grid = make_grid(model(torch.randn(15, 100)).detach(), nrow=5, normalize=True)
    plt.imshow(grid.permute(1, 2, 0))
    plt.show()

class MTGImageDataModule(pl.LightningDataModule):
    """Pytorch Lightning datamodule for image datasets."""
    def __init__(self, config: argparse.Namespace) -> None:
        """Construct datamodule."""
        super(MTGImageDataModule, self).__init__()
        self.config = config

    def setup(self, stage: Optional[str] = None) -> None:
        """Read and preprocess dataset images."""
        pipeline = T.Compose([
            lambda image: TF.crop(image, 23, 28, 90, 90),
            T.Resize(self.config.image_size),
            T.ToTensor(),
            T.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
        ])
        self.train_dataset = ImageFolder(
            self.config.data_dir, transform=pipeline
        )

    def train_dataloader(self) -> DataLoader:
        """Get training dataloader."""
        return DataLoader(self.train_dataset,
                          batch_size=self.config.batch_size, shuffle=True)
                          